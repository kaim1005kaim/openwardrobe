// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials auth
  role          String    @default("user") // user, admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  images        Image[]
  projects      Project[]
  jobs          GenerationJob[]
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

// Core Application Models
model Image {
  id               String   @id @default(cuid())
  userId           String?
  parentImageId    String?
  prompt           String
  imageUrl         String?
  upscaledUrls     String[]  @default([])
  status           String   @default("pending") // pending, in-progress, completed, failed
  progress         Float?   // 0.0 to 1.0
  designOptions    Json     // JSON DesignOptions
  tags             String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  parentImage      Image?    @relation("ImageVariations", fields: [parentImageId], references: [id])
  variations       Image[]   @relation("ImageVariations")
  favorites        Favorite[]
  projectImages    ProjectImage[]
  
  @@index([userId])
  @@index([createdAt])
  @@index([status])
}

model GenerationJob {
  id          String   @id @default(cuid())
  userId      String?
  status      String   @default("idle") // idle, submitting, queued, generating, complete, failed, canceled
  progress    Float?   // 0.0 to 1.0
  params      Json     // JSON GenerationParams
  error       Json?    // JSON error object
  imageIds    String[] @default([])
  isHighlighted Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectImages ProjectImage[]
  
  @@index([userId])
}

model ProjectImage {
  id        String   @id @default(cuid())
  projectId String
  imageId   String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  image     Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, imageId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  imageId   String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  
  @@unique([userId, imageId])
}

// Analytics and Usage Tracking
model AnalyticsEvent {
  id         String   @id @default(cuid())
  userId     String?
  sessionId  String
  event      String
  properties Json     // JSON event properties
  context    Json     // JSON context
  createdAt  DateTime @default(now())
  
  @@index([userId])
  @@index([event])
  @@index([createdAt])
}
